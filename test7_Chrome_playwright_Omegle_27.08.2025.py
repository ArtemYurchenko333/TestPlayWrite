import time
import random
import asyncio
import requests
from playwright.async_api import async_playwright
from proxy_auth import proxies

class PlaywrightUhmegleBot:
    def __init__(self):
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        self.message_count = 0
        
    def test_proxy_with_requests(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests"""
        try:
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests...")
            
            proxy_string = proxies["https"]
            proxy_parts = proxy_string.replace("http://", "").split("@")
            
            if len(proxy_parts) == 2:
                auth_part = proxy_parts[0]
                server_part = proxy_parts[1]
                username, password = auth_part.split(":")
                
                proxy_dict = {
                    'http': f'http://{username}:{password}@{server_part}',
                    'https': f'http://{username}:{password}@{server_part}'
                }
                
                # –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (—Ä–µ–∞–ª—å–Ω—ã–π IP)
                try:
                    real_ip = requests.get('https://api.ipify.org', timeout=10).text.strip()
                    print(f"üè† –†–µ–∞–ª—å–Ω—ã–π IP: {real_ip}")
                except:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP")
                
                # –¢–µ—Å—Ç —Å –ø—Ä–æ–∫—Å–∏
                response = requests.get('https://api.ipify.org', proxies=proxy_dict, timeout=15)
                proxy_ip = response.text.strip()
                print(f"üìç IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy_ip}")
                
                if proxy_ip != real_ip:
                    print("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ requests!")
                    return True
                else:
                    print("‚ùå –ü—Ä–æ–∫—Å–∏ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - IP –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests: {e}")
            return False

    async def setup_browser_with_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏"""
        try:
            print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            proxy_string = proxies["https"]
            proxy_parts = proxy_string.replace("http://", "").split("@")
            
            if len(proxy_parts) != 2:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏")
                return False
                
            auth_part = proxy_parts[0]
            server_part = proxy_parts[1]
            username, password = auth_part.split(":")
            proxy_host, proxy_port = server_part.split(":")
            
            print(f"üîß –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: {proxy_host}:{proxy_port}")
            print(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            
            self.playwright = await async_playwright().start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            browser_args = [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-blink-features=AutomationControlled",
                "--disable-web-security",
                "--ignore-certificate-errors",
                "--ignore-ssl-errors",
                "--allow-running-insecure-content",
                "--disable-extensions-except",
                "--disable-plugins-discovery"
            ]
            
            # –°–ª—É—á–∞–π–Ω—ã–π user-agent
            user_agents = [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.playwright.chromium.launch(
                headless=False,
                args=browser_args
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–∫—Å–∏
            self.context = await self.browser.new_context(
                proxy={
                    "server": f"http://{proxy_host}:{proxy_port}",
                    "username": username,
                    "password": password
                },
                user_agent=random.choice(user_agents),
                viewport={"width": 1280, "height": 720}
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await self.page.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});
                window.chrome = {runtime: {}};
            """)
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    async def check_ip_in_browser(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ api.ipify.org"""
        try:
            print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ api.ipify.org...")
            
            await self.page.goto("https://api.ipify.org", wait_until="networkidle")
            await self.page.wait_for_timeout(3000)
            
            # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ pre —Ç–µ–≥–∞
            ip_element = await self.page.query_selector("pre")
            if ip_element:
                ip_address = await ip_element.inner_text()
                ip_address = ip_address.strip()
                print(f"üìç –í–∞—à IP –∞–¥—Ä–µ—Å: {ip_address}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ
                if ip_address and ip_address != "185.102.186.90":  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP
                    print("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
                    return True
                else:
                    print("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å IP")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP: {e}")
            return False

    async def open_uhmegle(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ uhmegle.com"""
        try:
            print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º uhmegle.com...")
            await self.page.goto("https://uhmegle.com/", wait_until="networkidle")
            await self.page.wait_for_timeout(5000)
            
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {await self.page.title()}")
            print(f"üîó URL: {self.page.url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if "google_vignette" in self.page.url:
                print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç...")
                await self.page.goto("https://uhmegle.com/text/", wait_until="networkidle")
                await self.page.wait_for_timeout(5000)
                print(f"‚úÖ –ù–æ–≤—ã–π URL: {self.page.url}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∞–π—Ç–∞: {e}")
            return False

    async def find_and_click_start(self):
        """–ü–æ–∏—Å–∫ –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Start"""
        try:
            print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É Start...")
            await self.page.wait_for_timeout(5000)
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ Start
            selectors = [
                'button:has-text("Start")',
                'div:has-text("Start")',
                'span:has-text("Start")',
                'button:has-text("New")',
                'div:has-text("New")',
                '[class*="start"]',
                '[class*="bottomButton"]',
                'button',
                'div[role="button"]'
            ]
            
            for selector in selectors:
                try:
                    elements = await self.page.query_selector_all(selector)
                    for element in elements:
                        if await element.is_visible() and await element.is_enabled():
                            text = await element.inner_text()
                            text_lower = text.strip().lower()
                            
                            start_keywords = ["start", "begin", "new", "next", "go", "continue"]
                            if any(keyword in text_lower for keyword in start_keywords):
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: '{text}'")
                                print("üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Start...")
                                await element.click()
                                await self.page.wait_for_timeout(3000)
                                return True
                except Exception:
                    continue
            
            # Fallback: –Ω–∞–∂–∏–º–∞–µ–º –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–Ω–æ–ø–∫—É
            buttons = await self.page.query_selector_all('button')
            for button in buttons:
                if await button.is_visible() and await button.is_enabled():
                    print("üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–Ω–æ–ø–∫—É...")
                    await button.click()
                    await self.page.wait_for_timeout(3000)
                    return True
            
            print("‚ùå –ö–Ω–æ–ø–∫–∞ Start –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ Start: {e}")
            return False

    async def wait_for_chat_connection(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É...")
            await self.page.wait_for_timeout(5000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞
            chat_selectors = [
                'textarea',
                'input[type="text"]',
                '[class*="input"]',
                '[class*="chat"]'
            ]
            
            for selector in chat_selectors:
                try:
                    element = await self.page.query_selector(selector)
                    if element and await element.is_visible():
                        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É —É—Å–ø–µ—à–Ω–æ!")
                        return True
                except:
                    continue
            
            print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            
            # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input_selectors = [
                'textarea',
                'input[type="text"]',
                '[class*="input"] textarea',
                '[class*="input"] input'
            ]
            
            input_box = None
            for selector in input_selectors:
                try:
                    input_box = await self.page.query_selector(selector)
                    if input_box and await input_box.is_visible():
                        break
                except:
                    continue
            
            if not input_box:
                print("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            await input_box.clear()
            await self.page.wait_for_timeout(500)
            
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 3 —Å–µ–∫—É–Ω–¥—ã (–ø–æ —Å–∏–º–≤–æ–ª—É)
            typing_delay = 3000 / len(message)  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            await input_box.type(message, delay=typing_delay)
            
            await self.page.wait_for_timeout(500)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_selectors = [
                'button:has-text("Send")',
                'button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")',
                '[class*="send"]',
                'input[type="submit"]'
            ]
            
            send_btn = None
            for selector in send_selectors:
                try:
                    send_btn = await self.page.query_selector(selector)
                    if send_btn and await send_btn.is_visible():
                        break
                except:
                    continue
            
            if send_btn:
                await send_btn.click()
                await self.page.wait_for_timeout(1000)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Enter
                await input_box.press('Enter')
                await self.page.wait_for_timeout(1000)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Enter")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def disconnect_and_cleanup(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
        try:
            print("üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Stop/Really/Next
            stop_selectors = [
                'button:has-text("Stop")',
                'button:has-text("Really")',
                'button:has-text("Next")',
                'div:has-text("Stop")',
                'div:has-text("Really")',
                'div:has-text("Next")',
                '[class*="stop"]',
                '[class*="really"]',
                '[class*="next"]'
            ]
            
            for selector in stop_selectors:
                try:
                    elements = await self.page.query_selector_all(selector)
                    for element in elements:
                        if await element.is_visible() and await element.is_enabled():
                            text = await element.inner_text()
                            print(f"üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É: {text}")
                            await element.click()
                            await self.page.wait_for_timeout(1000)
                except:
                    continue
            
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            return False

    async def process_one_conversation(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            print(f"\nüë§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä #{self.message_count + 1}")
            
            # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = [
                "Hey love, got a SC? Add me and let's chat emily_meland",
                "Hey f20, Add me on snapchat and let's chat ‚Äî- emily_meland",
                "Hi, I'm Emily. Let's go to Snapchat - emily_meland",
                "Hey! Want to chat on Snapchat? emily_meland",
                "Hi there! Add me on SC: emily_meland"
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = random.choice(messages)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–≤–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã)
            if not await self.send_message(message):
                return False
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ 2.75 —Å–µ–∫—É–Ω–¥—ã
            print("‚è≥ –ü–∞—É–∑–∞ 2.75 —Å–µ–∫—É–Ω–¥—ã...")
            await asyncio.sleep(2.75)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await self.disconnect_and_cleanup()
            
            self.message_count += 1
            print(f"‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä #{self.message_count} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
            return False

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests
            if not self.test_proxy_with_requests():
                print("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ requests, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not await self.setup_browser_with_proxy():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            if not await self.check_ip_in_browser():
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
            if not await self.open_uhmegle():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
                return False
            
            # 5. –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º Start
            if not await self.find_and_click_start():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Start")
                return False
            
            # 6. –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É
            if not await self.wait_for_chat_connection():
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # 7. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            await self.process_one_conversation()
            
            print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            return False
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.page:
                print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                await self.page.close()
                self.page = None
                
            if self.context:
                print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
                await self.context.close()
                self.context = None
                
            if self.browser:
                print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                await self.browser.close()
                self.browser = None
                
            if self.playwright:
                print("üîí –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Playwright...")
                await self.playwright.stop()
                self.playwright = None
                
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        await asyncio.sleep(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = PlaywrightUhmegleBot()
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.cleanup()

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Windows"""
    import warnings
    warnings.filterwarnings("ignore", category=ResourceWarning)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
    if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        try:
            loop = asyncio.get_event_loop()
            if not loop.is_closed():
                pending = asyncio.all_tasks(loop)
                if pending:
                    for task in pending:
                        task.cancel()
        except:
            pass

if __name__ == "__main__":
    print("ü§ñ UHMEGLE BOT - PLAYWRIGHT –í–ï–†–°–ò–Ø")
    print("=" * 50)
    run_bot()
