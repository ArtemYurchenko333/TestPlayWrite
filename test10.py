import time
import random
import asyncio
import requests
from playwright.async_api import async_playwright
from proxy_auth99 import proxies, get_random_proxy, proxy_info

class MultiUserUhmegleBot:
    def __init__(self, max_users=35):
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        self.message_count = 0
        self.max_users = max_users
        self.current_proxy = None
        
    def test_proxy_with_requests(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        try:
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.current_proxy = get_random_proxy()
            proxy_string = self.current_proxy["https"]
            print(f"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_string}")
            
            proxy_parts = proxy_string.replace("http://", "").split("@")
            
            if len(proxy_parts) == 2:
                auth_part = proxy_parts[0]
                server_part = proxy_parts[1]
                username, password = auth_part.split(":")
                
                proxy_dict = {
                    'http': f'http://{username}:{password}@{server_part}',
                    'https': f'http://{username}:{password}@{server_part}'
                }
                
                # –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (—Ä–µ–∞–ª—å–Ω—ã–π IP)
                real_ip = None
                try:
                    real_ip = requests.get('https://httpbin.org/ip', timeout=10).json()['origin']
                    print(f"üè† –†–µ–∞–ª—å–Ω—ã–π IP: {real_ip}")
                except:
                    try:
                        real_ip = requests.get('https://api.ipify.org', timeout=10).text.strip()
                        print(f"üè† –†–µ–∞–ª—å–Ω—ã–π IP: {real_ip}")
                    except:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                test_services = [
                    'https://httpbin.org/ip',
                    'https://api.ipify.org',
                    'https://icanhazip.com'
                ]
                
                for service in test_services:
                    try:
                        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ {service}...")
                        
                        if 'httpbin' in service:
                            response = requests.get(service, proxies=proxy_dict, timeout=15)
                            proxy_ip = response.json()['origin'].split(',')[0].strip()
                        else:
                            response = requests.get(service, proxies=proxy_dict, timeout=15)
                            proxy_ip = response.text.strip()
                        
                        print(f"üìç IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ({service}): {proxy_ip}")
                        
                        if proxy_ip and proxy_ip != real_ip:
                            print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ requests! ({service})")
                            return True
                        elif proxy_ip == real_ip:
                            print(f"‚ö†Ô∏è IP –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è —á–µ—Ä–µ–∑ {service}")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {service}")
                            
                    except requests.exceptions.ProxyError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å {service}: {e}")
                    except requests.exceptions.Timeout as e:
                        print(f"‚ùå –¢–∞–π–º–∞—É—Ç —Å {service}: {e}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å {service}: {e}")
                        continue
                
                print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤—Å–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
                return False
                    
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    def test_proxy_connection(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            import socket
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            if not self.current_proxy:
                self.current_proxy = get_random_proxy()
            
            proxy_string = self.current_proxy["https"]
            proxy_parts = proxy_string.replace("http://", "").split("@")
            
            if len(proxy_parts) == 2:
                server_part = proxy_parts[1]
                host, port = server_part.split(":")
                
                print(f"üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {host}:{port}...")
                
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(10)
                result = sock.connect_ex((host, int(port)))
                sock.close()
                
                if result == 0:
                    print("‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result})")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

    def diagnose_proxy_issues(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–∫—Å–∏"""
        print("\n" + "üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ü–†–û–ö–°–ò")
        print("=" * 50)
        
        if not self.current_proxy:
            self.current_proxy = get_random_proxy()
        
        proxy_string = self.current_proxy["https"]
        proxy_parts = proxy_string.replace("http://", "").split("@")
        
        if len(proxy_parts) == 2:
            auth_part = proxy_parts[0]
            server_part = proxy_parts[1]
            username, password = auth_part.split(":")
            host, port = server_part.split(":")
            
            print(f"üîß –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏:")
            print(f"   ‚Ä¢ –•–æ—Å—Ç: {host}")
            print(f"   ‚Ä¢ –ü–æ—Ä—Ç: {port}")
            print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            print(f"   ‚Ä¢ –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
            
            print(f"\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            print(f"   ‚Ä¢ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print(f"   ‚Ä¢ –ü—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTTPS")
            print(f"   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
            print(f"   ‚Ä¢ –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞")
            
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å {host}:{port}")
            print(f"   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è")
            print(f"   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 10000-10999")
            print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏ ProxySaver")
            print(f"   5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        print("=" * 50)

    async def setup_browser_with_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        try:
            print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            if not self.current_proxy:
                self.current_proxy = get_random_proxy()
            
            proxy_string = self.current_proxy["https"]
            proxy_parts = proxy_string.replace("http://", "").split("@")
            
            if len(proxy_parts) != 2:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏")
                return False
                
            auth_part = proxy_parts[0]
            server_part = proxy_parts[1]
            username, password = auth_part.split(":")
            proxy_host, proxy_port = server_part.split(":")
            
            print(f"üîß –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: {proxy_host}:{proxy_port}")
            print(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            print(f"üåç –õ–æ–∫–∞—Ü–∏—è: {proxy_info['country']}, {proxy_info['region']}")
            
            self.playwright = await async_playwright().start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            browser_args = [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-blink-features=AutomationControlled",
                "--disable-web-security",
                "--ignore-certificate-errors",
                "--ignore-ssl-errors",
                "--allow-running-insecure-content",
                "--disable-extensions-except",
                "--disable-plugins-discovery",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--disable-renderer-backgrounding"
            ]
            
            # –°–ª—É—á–∞–π–Ω—ã–π user-agent
            user_agents = [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.playwright.chromium.launch(
                headless=False,
                args=browser_args
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–∫—Å–∏
            self.context = await self.browser.new_context(
                proxy={
                    "server": f"http://{proxy_host}:{proxy_port}",
                    "username": username,
                    "password": password
                },
                user_agent=random.choice(user_agents),
                viewport={"width": 1280, "height": 720},
                locale="en-US"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            self.page.set_default_timeout(30000)
            self.page.set_default_navigation_timeout(60000)
            
            # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await self.page.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});
                window.chrome = {runtime: {}};
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º WebRTC –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP
                navigator.getUserMedia = navigator.webkitGetUserMedia = navigator.mozGetUserMedia = function () {
                    throw new Error('WebRTC blocked');
                };
            """)
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    async def setup_browser_without_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ë–ï–ó –ø—Ä–æ–∫—Å–∏...")
            
            self.playwright = await async_playwright().start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            browser_args = [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-blink-features=AutomationControlled"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.playwright.chromium.launch(
                headless=False,
                args=browser_args
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ë–ï–ó –ø—Ä–æ–∫—Å–∏
            self.context = await self.browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                viewport={"width": 1280, "height": 720}
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            self.page.set_default_timeout(30000)
            self.page.set_default_navigation_timeout(60000)
            
            # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await self.page.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});
                window.chrome = {runtime: {}};
            """)
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ë–ï–ó –ø—Ä–æ–∫—Å–∏")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    async def check_ip_in_browser(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HTTP —Å–µ—Ä–≤–∏—Å—ã (–º–æ–≥—É—Ç –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)
        ip_services = [
            {
                "url": "http://httpbin.org/ip",
                "name": "HTTPBin (HTTP)",
                "selector": "pre",
                "json_key": "origin"
            },
            {
                "url": "http://api.ipify.org",
                "name": "IPify (HTTP)",
                "selector": "pre",
                "json_key": None
            },
            {
                "url": "http://icanhazip.com",
                "name": "ICanHazIP (HTTP)",
                "selector": "pre",
                "json_key": None
            },
            {
                "url": "https://httpbin.org/ip",
                "name": "HTTPBin (HTTPS)",
                "selector": "pre",
                "json_key": "origin"
            },
            {
                "url": "https://api.ipify.org",
                "name": "IPify (HTTPS)",
                "selector": "pre",
                "json_key": None
            }
        ]
        
        for service in ip_services:
            try:
                print(f"üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ {service['name']}: {service['url']}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–µ—Ä–≤–∏—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                await self.page.goto(service['url'], wait_until="domcontentloaded", timeout=20000)
                await self.page.wait_for_timeout(5000)
                
                # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
                ip_element = await self.page.query_selector(service['selector'])
                if ip_element:
                    content = await ip_element.inner_text()
                    content = content.strip()
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ JSON, –ø–∞—Ä—Å–∏–º –µ–≥–æ
                    if service['json_key']:
                        try:
                            import json
                            data = json.loads(content)
                            ip_address = data.get(service['json_key'], '').split(',')[0].strip()
                        except:
                            ip_address = content
                    else:
                        ip_address = content
                    
                    print(f"üìç IP –æ—Ç {service['name']}: {ip_address}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –≤–∞–ª–∏–¥–Ω—ã–π
                    if ip_address and len(ip_address.split('.')) == 4:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP)
                        if ip_address != "185.102.186.90":
                            print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! IP: {ip_address}")
                            return True
                        else:
                            print(f"‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π IP: {ip_address}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP: {ip_address}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å IP –Ω–∞ {service['name']}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å {service['name']}: {e}")
                continue
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ–º –ª–∏ –º—ã –≤–æ–æ–±—â–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏...")
        try:
            await self.page.goto("http://example.com", wait_until="domcontentloaded", timeout=15000)
            print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è HTTP —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –ø—Ä–æ–∫—Å–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        except Exception as e:
            print(f"‚ùå –î–∞–∂–µ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {e}")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –ª–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?
            print("üîç –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é...")
            try:
                await self.page.goto("https://www.google.com", wait_until="domcontentloaded", timeout=10000)
                print("‚ö†Ô∏è Google –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                return True
            except Exception as e2:
                print(f"‚ùå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {e2}")
                return False

    async def open_uhmegle_with_retry(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ uhmegle.com —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        urls_to_try = [
            "https://uhmegle.com/text/",
            "https://uhmegle.com/",
            "https://www.uhmegle.com/text/",
            "https://www.uhmegle.com/"
        ]
        
        for attempt in range(3):
            for url in urls_to_try:
                try:
                    print(f"üåê –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—Ç–∫—Ä—ã–≤–∞–µ–º {url}...")
                    
                    await self.page.goto(url, wait_until="domcontentloaded", timeout=30000)
                    await self.page.wait_for_timeout(5000)
                    
                    title = await self.page.title()
                    current_url = self.page.url
                    
                    print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
                    print(f"üîó URL: {current_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                    if "uhmegle" in current_url.lower() and not "error" in title.lower():
                        print("‚úÖ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                        return True
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {url}: {e}")
                    continue
            
            if attempt < 2:
                print(f"‚è≥ –ñ–¥–µ–º {(attempt + 1) * 5} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep((attempt + 1) * 5)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def wait_for_connection_and_start(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ Start"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            
            # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            for attempt in range(20):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    page_text = await self.page.inner_text("body")
                    
                    if "connecting to server" in page_text.lower():
                        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
                        await self.page.wait_for_timeout(3000)
                        continue
                    
                    if "lost connection" in page_text.lower():
                        print("üîÑ –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∂–¥–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                        await self.page.wait_for_timeout(3000)
                        continue
                    
                    if "attempting to reconnect" in page_text.lower():
                        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                        await self.page.wait_for_timeout(3000)
                        continue
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –∏—â–µ–º –∫–Ω–æ–ø–∫—É Start
                    if await self.find_and_click_start():
                        return True
                    
                    await self.page.wait_for_timeout(3000)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")
                    await self.page.wait_for_timeout(3000)
                    continue
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def find_and_click_start(self):
        """–ü–æ–∏—Å–∫ –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Start"""
        try:
            print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É Start...")
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ Start
            selectors_to_try = [
                'button:has-text("Start")',
                'div:has-text("Start")',
                'span:has-text("Start")',
                'button:has-text("New")',
                'div:has-text("New")',
                'button:has-text("Begin")',
                '[class*="start"]',
                '[class*="bottomButton"]',
                '[class*="button"]',
                'button',
                'div[role="button"]'
            ]
            
            for selector in selectors_to_try:
                try:
                    elements = await self.page.query_selector_all(selector)
                    for element in elements:
                        if await element.is_visible() and await element.is_enabled():
                            text = await element.inner_text()
                            text_lower = text.strip().lower()
                            
                            start_keywords = [
                                "start", "begin", "new", "next", "go", 
                                "continue", "chat", "connect", "enter"
                            ]
                            
                            if any(keyword in text_lower for keyword in start_keywords) or len(text_lower) == 0:
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: '{text}' (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                                print("üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É...")
                                
                                await element.scroll_into_view_if_needed()
                                await element.click()
                                await self.page.wait_for_timeout(3000)
                                
                                print("‚úÖ –ö–Ω–æ–ø–∫–∞ Start –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
                                return True
                                
                except Exception:
                    continue
            
            print("‚ùå –ö–Ω–æ–ø–∫–∞ Start –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ Start: {e}")
            return False

    async def wait_for_chat_ready(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞...")
            
            for attempt in range(15):
                try:
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
                    chat_selectors = [
                        'textarea',
                        'input[type="text"]',
                        '[class*="input"]',
                        '[class*="chat"]',
                        '[placeholder*="message"]',
                        '[placeholder*="type"]'
                    ]
                    
                    for selector in chat_selectors:
                        try:
                            element = await self.page.query_selector(selector)
                            if element and await element.is_visible():
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞: {selector}")
                                return True
                        except:
                            continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    page_text = await self.page.inner_text("body")
                    if any(keyword in page_text.lower() for keyword in ["you're now chatting", "stranger", "connected"]):
                        print("‚úÖ –ß–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
                        return True
                    
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞...")
                    await self.page.wait_for_timeout(2000)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}")
                    await self.page.wait_for_timeout(2000)
                    continue
            
            print("‚ö†Ô∏è –ß–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞: {e}")
            return False

    async def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            
            # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input_selectors = [
                'textarea',
                'input[type="text"]',
                '[class*="input"] textarea',
                '[class*="input"] input',
                '[placeholder*="message"]',
                '[placeholder*="type"]'
            ]
            
            input_box = None
            for selector in input_selectors:
                try:
                    input_box = await self.page.query_selector(selector)
                    if input_box and await input_box.is_visible() and await input_box.is_enabled():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞: {selector}")
                        break
                except:
                    continue
            
            if not input_box:
                print("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ
            await input_box.focus()
            await self.page.wait_for_timeout(500)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            await input_box.fill("")
            await self.page.wait_for_timeout(500)
            
            # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 4 —Å–µ–∫—É–Ω–¥—ã (–ø–æ —Å–∏–º–≤–æ–ª—É)
            typing_delay = 4000 / len(message)
            await input_box.type(message, delay=typing_delay)
            
            await self.page.wait_for_timeout(500)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_selectors = [
                'button:has-text("Send")',
                'button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")',
                '[class*="send"]',
                'input[type="submit"]',
                '[onclick*="send"]'
            ]
            
            send_btn = None
            for selector in send_selectors:
                try:
                    send_btn = await self.page.query_selector(selector)
                    if send_btn and await send_btn.is_visible():
                        break
                except:
                    continue
            
            if send_btn:
                await send_btn.click()
                await self.page.wait_for_timeout(1000)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
                return True
            else:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Enter
                await input_box.press('Enter')
                await self.page.wait_for_timeout(1000)
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Enter")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def find_next_button(self):
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É"""
        try:
            print("üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É...")

            ## –®–∞–≥ 1. –ù–∞–∂–∏–º–∞–µ–º ¬´Stop¬ª
            #if not await self._click_first_visible([
            #    # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è Stop-–∫–Ω–æ–ø–∫–∏
            #    'button:has-text("Stop")',                 # –ö–Ω–æ–ø–∫–∞
            #    'div:has-text("Stop")',                    # –í–ª–æ–∂–µ–Ω–Ω—ã–π div —Å —Ç–µ–∫—Å—Ç–æ–º
            #    'div.bottomButton.stop',                    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä-–∫–Ω–æ–ø–∫–∞
            #    'div.bottomButton.skipButton.stop',         # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤
            #    '[class*="skipButton"][class*="stop"]',   # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
            #    '[class*="stop"]',                         # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º stop
            #], "stop"):
            #    print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Stop –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ ...")

            if not await self._click_first_visible([
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ Stop
                'div.bottomButton.outlined.skipButton.noSelect.stop',    # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –∫–Ω–æ–ø–∫–∏
                'div.bottomButton.stop',                                 # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                'div[class*="bottomButton"][class*="stop"]',             # –ß–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã
                'div.bottomButton:has-text("Stop")',                     # –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–∫—Å—Ç Stop
                'div.bottomButton.skipButton:has-text("Stop")',          # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ
                '.stop',                                                 # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å
                'div:has(.mainText:has-text("Stop"))',                   # Div —Å–æ–¥–µ—Ä–∂–∞—â–∏–π mainText —Å Stop
            ], "Stop"):
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Stop –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ ...")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self.page.wait_for_timeout(2000)

            ## –®–∞–≥ 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º ¬´Really¬ª
            #await self._click_first_visible([
            #    # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è Really-–∫–Ω–æ–ø–∫–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
            #    'button:has-text("Really")',               # –ö–Ω–æ–ø–∫–∞
            #    'div:has-text("Really")',                  # –í–ª–æ–∂–µ–Ω–Ω—ã–π div —Å —Ç–µ–∫—Å—Ç–æ–º
            #    'div.bottomButton.really',                  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä-–∫–Ω–æ–ø–∫–∞
            #    'div.bottomButton.skipButton.really',       # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤
            #    '[class*="skipButton"][class*="really"]', # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
            #    '[class*="really"]',                       # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º really
            #], "really")

            await self._click_first_visible([
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                'div.bottomButton.outlined.skipButton.noSelect.really',  # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –∫–Ω–æ–ø–∫–∏
                'div.bottomButton.really',                               # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                'div[class*="bottomButton"][class*="really"]',           # –ß–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã
                'div.bottomButton:has-text("Really")',                   # –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–∫—Å—Ç Really
                'div.bottomButton.skipButton:has-text("Really")',        # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ
                '.really',                                               # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å
                'div:has(.mainText:has-text("Really"))',                 # Div —Å–æ–¥–µ—Ä–∂–∞—â–∏–π mainText —Å Really
            ], "Really")

            # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            await self.page.wait_for_timeout(2500)

            # –®–∞–≥ 3. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç ‚Äî ¬´Start¬ª –∏–ª–∏ ¬´New¬ª
            #if not await self._click_first_visible([
            #    'button:has-text("Start")',
            #    'div:has-text("Start")',
            #    'button:has-text("New")',
            #    'div:has-text("New")',
            #    '[class*="start"]',
            #    '[class*="new"]',
            #], "Start/New"):
            if not await self._click_first_visible([
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ New
            'div.bottomButton.outlined.skipButton.noSelect.new',     # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –∫–Ω–æ–ø–∫–∏ New
            'div.bottomButton.new',                                  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç New
            'div[class*="bottomButton"][class*="new"]',              # –ß–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã New
            'div.bottomButton:has-text("New")',                      # –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–∫—Å—Ç New
            'div.bottomButton.skipButton:has-text("New")',           # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ New
            '.new',                                                  # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å new
            'div:has(.mainText:has-text("New"))',                    # Div —Å–æ–¥–µ—Ä–∂–∞—â–∏–π mainText —Å New
    
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ Start (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            'div.bottomButton.outlined.skipButton.noSelect.start',   # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª–∞—Å—Å–æ–≤ –∫–Ω–æ–ø–∫–∏ Start
            'div.bottomButton.start',                                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç Start
            'div[class*="bottomButton"][class*="start"]',            # –ß–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã Start
            'div.bottomButton:has-text("Start")',                    # –ö–Ω–æ–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–µ–∫—Å—Ç Start
            'div.bottomButton.skipButton:has-text("Start")',         # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ Start
            '.start',                                                # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å start
            'div:has(.mainText:has-text("Start"))',                  # Div —Å–æ–¥–µ—Ä–∂–∞—â–∏–π mainText —Å Start
    
            # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞–∫ fallback
            'button:has-text("Start")',
            'div:has-text("Start")',
            'button:has-text("New")',
            'div:has-text("New")',
            '[class*="start"]',
            '[class*="new"]',
            ], "Start/New"):
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç. –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞: {e}")
            return False

    async def _click_first_visible(self, selectors: list[str], debug_name: str = "") -> bool:
        """–ò—â–µ—Ç –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ –Ω–µ–º—É"""
        for selector in selectors:
            try:
                elements = await self.page.query_selector_all(selector)
                for element in elements:
                    if await element.is_visible() and await element.is_enabled():
                        text = (await element.inner_text()).strip()
                        print(f"üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º {debug_name or text}: '{text or selector}'")
                        await element.click()
                        return True
            except Exception:
                continue
        return False

    async def process_one_conversation(self, user_number):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            print(f"\nüë§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{user_number}/{self.max_users}")
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {user_number}/{self.max_users} ({(user_number/self.max_users)*100:.1f}%)")
            
            # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
             #messages = [
            #    "Hey love, got a SC? Add me and let's chat emily_meland",
            #    "Hey f20, Add me on snapchat and let's chat ‚Äî- emily_meland",
            #    "Hi, I'm Emily. Let's go to Snapchat - emily_meland",
            #    "Hey! Want to chat on Snapchat? emily_meland",
            #    "Hi there! Add me on SC: emily_meland"
            #]

            messages = [
                "Hey F, let‚Äôs chat on a s n a p? Add me and let's chat emilymelandxxx",
                "Hey f20, Add me on snapchat and let's chat‚Ä¶ emilymelandxxx",
                "Hi, I'm Emily. Let's go to Snapchat - emilymelandxxx",
                "Hey! Want to chat on Snapchat? emilymelandxxx",
                "Hi there! Add me on snap: emilymelandxxx"
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = random.choice(messages)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–≤–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç 4 —Å–µ–∫—É–Ω–¥—ã)
            if not await self.send_message(message):
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ 4.75 —Å–µ–∫—É–Ω–¥—ã
            print("‚è≥ –ü–∞—É–∑–∞ 4.75 —Å–µ–∫—É–Ω–¥—ã...")
            await asyncio.sleep(4.75)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            if user_number < self.max_users:
                await self.find_next_button()
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                await self.page.wait_for_timeout(3000)
            
            self.message_count += 1
            print(f"‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{user_number} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
            return False

    def check_proxy_ip(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å https://api.ipify.org –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏
            if not self.current_proxy:
                self.current_proxy = get_random_proxy()

            proxy_string = self.current_proxy["https"]
            proxy_parts = proxy_string.replace("http://", "").split("@")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è requests
            if len(proxy_parts) == 2:
                auth_part, server_part = proxy_parts
                username, password = auth_part.split(":")
                proxy_dict = {
                    "http": f"http://{username}:{password}@{server_part}",
                    "https": f"http://{username}:{password}@{server_part}"
                }
            else:
                proxy_dict = {"http": proxy_string, "https": proxy_string}

            print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ https://api.ipify.org ...")
            response = requests.get("https://api.ipify.org", proxies=proxy_dict, timeout=15)
            ip_address = response.text.strip()
            print(f"üìç IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {ip_address}")
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å {self.max_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
            print(f"üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_info['host']} ({proxy_info['country']})")

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å api.ipify.org
            print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê IP –ß–ï–†–ï–ó API.IPIFY.ORG")
            print("-" * 40)
            if not self.check_proxy_ip():
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

            # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            print("\n2Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê")
            print("-" * 40)
            if not await self.setup_browser_with_proxy():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False

            # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            print("\n3Ô∏è‚É£ –û–¢–ö–†–´–¢–ò–ï –°–ê–ô–¢–ê")
            print("-" * 40)
            if not await self.open_uhmegle_with_retry():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
                return False

            # 4. –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É Start
            print("\n4Ô∏è‚É£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ï–†–í–ï–†–£")
            print("-" * 40)
            if not await self.wait_for_connection_and_start():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Start")
                return False

            # 5. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
            print("\n5Ô∏è‚É£ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ß–ê–¢–ê")
            print("-" * 40)
            if not await self.wait_for_chat_ready():
                print("‚ö†Ô∏è –ß–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

            # 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\n6Ô∏è‚É£ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
            print("-" * 40)

            
            for user_num in range(1, self.max_users + 1):
                try:
                    success = await self.process_one_conversation(user_num)
                    if not success:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{user_num}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    if user_num < self.max_users:
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{user_num}: {e}")
                    continue
                
            print("=" * 60)
            print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}/{self.max_users}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            return False
        finally:
            await self.cleanup()

    async def run_without_proxy(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ë–ï–ó –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó –ü–†–û–ö–°–ò –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å {self.max_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ - –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω!")
            
            # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            print("\n1Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê (–ë–ï–ó –ü–†–û–ö–°–ò)")
            print("-" * 40)
            if not await self.setup_browser_without_proxy():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º IP (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π)
            print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê IP (–†–ï–ê–õ–¨–ù–´–ô)")
            print("-" * 40)
            await self.check_ip_in_browser()
            
            # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
            print("\n3Ô∏è‚É£ –û–¢–ö–†–´–¢–ò–ï –°–ê–ô–¢–ê")
            print("-" * 40)
            if not await self.open_uhmegle_with_retry():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
                return False
            
            # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
            print("\n4Ô∏è‚É£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ï–†–í–ï–†–£")
            print("-" * 40)
            if not await self.wait_for_connection_and_start():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Start")
                return False
            
            # 5. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
            print("\n5Ô∏è‚É£ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ß–ê–¢–ê")
            print("-" * 40)
            if not await self.wait_for_chat_ready():
                print("‚ö†Ô∏è –ß–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\n6Ô∏è‚É£ –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
            print("-" * 40)
            
            for user_num in range(1, self.max_users + 1):
                try:
                    success = await self.process_one_conversation(user_num)
                    if not success:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{user_num}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    if user_num < self.max_users:
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{user_num}: {e}")
                    continue
                
            print("=" * 60)
            print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}/{self.max_users}")
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            return False
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.page:
                print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                await self.page.close()
                self.page = None
                
            if self.context:
                print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
                await self.context.close()
                self.context = None
                
            if self.browser:
                print("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                await self.browser.close()
                self.browser = None
                
            if self.playwright:
                print("üîí –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Playwright...")
                await self.playwright.stop()
                self.playwright = None
                
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        await asyncio.sleep(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ UHMEGLE BOT - –ú–£–õ–¨–¢–ò-–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 60)
    print("üîß –§—É–Ω–∫—Ü–∏–∏:")
    print("   ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π 35 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    print("   ‚úÖ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ ProxySaver")
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏")
    print("   ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("=" * 60)
    
    print("\nüîß –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
    print("1. üîí –° –ø—Ä–æ–∫—Å–∏ ProxySaver (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. üåê –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    print("3. üîç –¢–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏")
    
    try:
        mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
        if not mode:
            mode = "1"
            
        max_users = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 35): ").strip()
        if not max_users or not max_users.isdigit():
            max_users = 35
        else:
            max_users = int(max_users)
            
        bot = MultiUserUhmegleBot(max_users=max_users)
        
        if mode == "1":
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø—Ä–æ–∫—Å–∏
            await bot.run()
        elif mode == "2":
            # –†–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            await bot.run_without_proxy()
        elif mode == "3":
            # –¢–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ö–°–ò")
            print("-" * 40)
            bot.test_proxy_connection()
            bot.test_proxy_with_requests()
            bot.diagnose_proxy_issues()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Windows"""
    import warnings
    warnings.filterwarnings("ignore", category=ResourceWarning)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
    if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        try:
            loop = asyncio.get_event_loop()
            if not loop.is_closed():
                pending = asyncio.all_tasks(loop)
                if pending:
                    for task in pending:
                        task.cancel()
        except:
            pass

if __name__ == "__main__":
    run_bot()