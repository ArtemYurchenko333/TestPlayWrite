import requests
import socket
import time
import asyncio
from playwright.async_api import async_playwright
from proxy_auth33 import proxies, get_random_proxy, proxy_info, get_proxy_by_port

class ProxyTester:
    def __init__(self):
        self.current_proxy = None
        self.results = {}
        
    def print_header(self, title):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "=" * 60)
        print(f"üîç {title}")
        print("=" * 60)
    
    def print_section(self, title):
        """–ü–µ—á–∞—Ç—å —Å–µ–∫—Ü–∏–∏"""
        print(f"\nüìã {title}")
        print("-" * 40)
    
    def parse_proxy(self, proxy_string):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            proxy_parts = proxy_string.replace("http://", "").split("@")
            if len(proxy_parts) == 2:
                auth_part = proxy_parts[0]
                server_part = proxy_parts[1]
                username, password = auth_part.split(":")
                host, port = server_part.split(":")
                
                return {
                    'host': host,
                    'port': int(port),
                    'username': username,
                    'password': password,
                    'full_string': proxy_string
                }
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return None
    
    def test_tcp_connection(self, proxy_data):
        """–¢–µ—Å—Ç TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            print(f"üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {proxy_data['host']}:{proxy_data['port']}...")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            
            start_time = time.time()
            result = sock.connect_ex((proxy_data['host'], proxy_data['port']))
            end_time = time.time()
            
            sock.close()
            
            if result == 0:
                response_time = round((end_time - start_time) * 1000, 2)
                print(f"‚úÖ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ({response_time}ms)")
                return True, response_time
            else:
                print(f"‚ùå TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result})")
                return False, None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False, None
    
    def test_http_proxy_requests(self, proxy_data):
        """–¢–µ—Å—Ç HTTP –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests"""
        try:
            print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests...")
            
            proxy_dict = {
                'http': f'http://{proxy_data["username"]}:{proxy_data["password"]}@{proxy_data["host"]}:{proxy_data["port"]}',
                'https': f'http://{proxy_data["username"]}:{proxy_data["password"]}@{proxy_data["host"]}:{proxy_data["port"]}'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP
            try:
                real_ip = requests.get('https://httpbin.org/ip', timeout=10).json()['origin']
                print(f"üè† –†–µ–∞–ª—å–Ω—ã–π IP: {real_ip}")
            except:
                real_ip = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            test_urls = [
                {'url': 'https://httpbin.org/ip', 'name': 'HTTPBin', 'json_key': 'origin'},
                {'url': 'https://api.ipify.org', 'name': 'IPify', 'json_key': None},
                {'url': 'https://icanhazip.com', 'name': 'ICanHazIP', 'json_key': None}
            ]
            
            successful_tests = 0
            proxy_ips = []
            
            for test in test_urls:
                try:
                    print(f"   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {test['name']}...")
                    start_time = time.time()
                    
                    response = requests.get(test['url'], proxies=proxy_dict, timeout=15)
                    
                    end_time = time.time()
                    response_time = round((end_time - start_time) * 1000, 2)
                    
                    if test['json_key']:
                        proxy_ip = response.json()[test['json_key']].split(',')[0].strip()
                    else:
                        proxy_ip = response.text.strip()
                    
                    print(f"   ‚úÖ {test['name']}: {proxy_ip} ({response_time}ms)")
                    proxy_ips.append(proxy_ip)
                    successful_tests += 1
                    
                except requests.exceptions.ProxyError as e:
                    print(f"   ‚ùå {test['name']}: –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ - {e}")
                except requests.exceptions.Timeout as e:
                    print(f"   ‚ùå {test['name']}: –¢–∞–π–º–∞—É—Ç - {e}")
                except Exception as e:
                    print(f"   ‚ùå {test['name']}: {e}")
            
            if successful_tests > 0:
                unique_ips = list(set(proxy_ips))
                print(f"‚úÖ HTTP –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/3")
                print(f"üìç IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {', '.join(unique_ips)}")
                
                if real_ip != "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" and any(ip != real_ip for ip in unique_ips):
                    print("‚úÖ IP —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω - –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    return True, unique_ips
                else:
                    print("‚ö†Ô∏è IP –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏")
                    return False, unique_ips
            else:
                print("‚ùå HTTP –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False, []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –ø—Ä–æ–∫—Å–∏: {e}")
            return False, []
    
    async def test_playwright_proxy(self, proxy_data):
        """–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –≤ Playwright"""
        try:
            print(f"üé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ Playwright...")
            
            playwright = await async_playwright().start()
            
            browser = await playwright.chromium.launch(headless=True)
            
            context = await browser.new_context(
                proxy={
                    "server": f"http://{proxy_data['host']}:{proxy_data['port']}",
                    "username": proxy_data['username'],
                    "password": proxy_data['password']
                }
            )
            
            page = await context.new_page()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            test_services = [
                'https://httpbin.org/ip',
                'https://api.ipify.org',
                'https://icanhazip.com'
            ]
            
            successful_tests = 0
            playwright_ips = []
            
            for service in test_services:
                try:
                    print(f"   üîÑ Playwright —Ç–µ—Å—Ç: {service}")
                    
                    await page.goto(service, timeout=20000)
                    await page.wait_for_timeout(3000)
                    
                    if 'httpbin' in service:
                        content = await page.inner_text('pre')
                        import json
                        ip = json.loads(content)['origin'].split(',')[0].strip()
                    else:
                        ip = await page.inner_text('pre')
                        ip = ip.strip()
                    
                    print(f"   ‚úÖ {service}: {ip}")
                    playwright_ips.append(ip)
                    successful_tests += 1
                    
                except Exception as e:
                    print(f"   ‚ùå {service}: {e}")
            
            await browser.close()
            await playwright.stop()
            
            if successful_tests > 0:
                unique_ips = list(set(playwright_ips))
                print(f"‚úÖ Playwright –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/3")
                print(f"üìç IP –∞–¥—Ä–µ—Å–∞: {', '.join(unique_ips)}")
                return True, unique_ips
            else:
                print("‚ùå Playwright –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False, []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Playwright –ø—Ä–æ–∫—Å–∏: {e}")
            return False, []
    
    def test_multiple_ports(self, base_proxy_data, ports_to_test=5):
        """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ä—Ç–æ–≤"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {ports_to_test} —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤...")
        
        base_port = base_proxy_data['port']
        working_ports = []
        
        for i in range(ports_to_test):
            test_port = base_port + i
            print(f"\n   üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä—Ç {test_port}...")
            
            test_proxy_data = base_proxy_data.copy()
            test_proxy_data['port'] = test_port
            
            tcp_result, response_time = self.test_tcp_connection(test_proxy_data)
            if tcp_result:
                working_ports.append({'port': test_port, 'response_time': response_time})
        
        if working_ports:
            print(f"\n‚úÖ –†–∞–±–æ—á–∏–µ –ø–æ—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {len(working_ports)}/{ports_to_test}")
            for port_info in working_ports:
                print(f"   ‚Ä¢ –ü–æ—Ä—Ç {port_info['port']}: {port_info['response_time']}ms")
        else:
            print(f"\n‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ {ports_to_test} –ø–æ—Ä—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return working_ports
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ü–†–û–ö–°–ò")
        
        print(f"üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏:")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {proxy_info['host']}")
        print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {proxy_info['country']}")
        print(f"   ‚Ä¢ –†–µ–≥–∏–æ–Ω: {proxy_info['region']}")
        print(f"   ‚Ä¢ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {proxy_info['traffic_limit']}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for test_name, result in self.results.items():
            status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if result['success'] else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            print(f"   ‚Ä¢ {test_name}: {status}")
            if 'details' in result:
                print(f"     {result['details']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if any(result['success'] for result in self.results.values()):
            print("   ‚úÖ –ü—Ä–æ–∫—Å–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
            if not self.results.get('tcp', {}).get('success'):
                print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç")
            if not self.results.get('http', {}).get('success'):
                print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å HTTP - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
            if not self.results.get('playwright', {}).get('success'):
                print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Playwright - –≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è HTTPS")
        else:
            print("   ‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–≤—Å–µ–º")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ proxy_auth22.py")
            print("   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –ø—Ä–æ–∫—Å–∏")
            print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ—Ä—Ç—ã")
    
    async def run_full_test(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏"""
        self.print_header("–ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ö–°–ò")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        self.current_proxy = get_random_proxy()
        proxy_string = self.current_proxy["https"]
        
        print(f"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–∫—Å–∏: {proxy_string}")
        
        proxy_data = self.parse_proxy(proxy_string)
        if not proxy_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
            return
        
        # 1. TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.print_section("1. –¢–ï–°–¢ TCP –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
        tcp_success, response_time = self.test_tcp_connection(proxy_data)
        self.results['tcp'] = {
            'success': tcp_success,
            'details': f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time}ms" if response_time else "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        }
        
        # 2. HTTP –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ requests
        self.print_section("2. –¢–ï–°–¢ HTTP –ü–†–û–ö–°–ò (REQUESTS)")
        http_success, ips = self.test_http_proxy_requests(proxy_data)
        self.results['http'] = {
            'success': http_success,
            'details': f"IP –∞–¥—Ä–µ—Å–∞: {', '.join(ips)}" if ips else "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö IP"
        }
        
        # 3. Playwright –ø—Ä–æ–∫—Å–∏
        self.print_section("3. –¢–ï–°–¢ PLAYWRIGHT –ü–†–û–ö–°–ò")
        playwright_success, playwright_ips = await self.test_playwright_proxy(proxy_data)
        self.results['playwright'] = {
            'success': playwright_success,
            'details': f"IP –∞–¥—Ä–µ—Å–∞: {', '.join(playwright_ips)}" if playwright_ips else "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö IP"
        }
        
        # 4. –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ä—Ç–æ–≤
        self.print_section("4. –¢–ï–°–¢ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–û–†–¢–û–í")
        working_ports = self.test_multiple_ports(proxy_data, 5)
        self.results['ports'] = {
            'success': len(working_ports) > 0,
            'details': f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ä—Ç–æ–≤: {len(working_ports)}/5"
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()

def test_specific_proxy():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    print("üîß –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–†–û–ö–°–ò")
    print("-" * 40)
    
    # –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç
    specific_port = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ): ").strip()
    
    if specific_port and specific_port.isdigit():
        test_proxy = get_proxy_by_port(int(specific_port))
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä—Ç {specific_port}")
    else:
        test_proxy = get_random_proxy()
        print("üé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏")
    
    print(f"üìç –ü—Ä–æ–∫—Å–∏: {test_proxy['https']}")
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ requests
    try:
        proxy_string = test_proxy["https"]
        proxy_parts = proxy_string.replace("http://", "").split("@")
        auth_part = proxy_parts[0]
        server_part = proxy_parts[1]
        username, password = auth_part.split(":")
        
        proxy_dict = {
            'http': f'http://{username}:{password}@{server_part}',
            'https': f'http://{username}:{password}@{server_part}'
        }
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ requests...")
        response = requests.get('https://httpbin.org/ip', proxies=proxy_dict, timeout=15)
        proxy_ip = response.json()['origin']
        
        print(f"‚úÖ –£—Å–ø–µ—Ö! IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy_ip}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–ï–°–¢–ï–† –ü–†–û–ö–°–ò ProxySaver")
    print("=" * 60)
    print("–†–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏")
    print("3. üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ").strip()
        
        if choice == "1":
            tester = ProxyTester()
            await tester.run_full_test()
            
        elif choice == "2":
            test_specific_proxy()
            
        elif choice == "3":
            print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–°–¢–†–û–ô–ö–ê–•")
            print("-" * 40)
            print(f"üîß –•–æ—Å—Ç: {proxy_info['host']}")
            print(f"üåç –°—Ç—Ä–∞–Ω–∞: {proxy_info['country']}")
            print(f"üèôÔ∏è –†–µ–≥–∏–æ–Ω: {proxy_info['region']}")
            print(f"üèòÔ∏è –ì–æ—Ä–æ–¥: {proxy_info['city']}")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {proxy_info['username']}")
            print(f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(proxy_info['password'])}")
            print(f"üö™ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: {proxy_info['port_range']}")
            print(f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {proxy_info['traffic_limit']}")
            print(f"üîÑ –†–æ—Ç–∞—Ü–∏—è: {proxy_info['rotation']}")
            
            print(f"\nüîó –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–∫—Å–∏:")
            for i in range(3):
                example_proxy = get_random_proxy()
                print(f"   ‚Ä¢ {example_proxy['https']}")
                
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏...")
    asyncio.run(main())
